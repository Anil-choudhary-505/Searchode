const searchInput = document.getElementById("searchInput");
const searchButton = document.getElementById("searchButton");
const definition = document.getElementById("definition");

const dictionary = {
    "hello": "a greeting",
    "goodbye": "an expression of farewell",
    "yes": "a word used to affirm or agree",
    "no": "a word used to deny or disagree",
    "please": "a polite word used when making a request",
    "thank you": "an expression of gratitude",
    "you": "the second-person pronoun referring to the person addressed",
    "me": "the first-person pronoun referring to the speaker",
    "we": "the first-person pronoun referring to the speaker and one or more others",
    "they": "the third-person pronoun referring to two or more people",
    "is": "the present singular indicative form of the verb 'to be'",
    "am": "the present first-person singular indicative form of the verb 'to be'",
    "are": "the present second-person and plural indicative form of the verb 'to be'",
    "what": "a question word used to ask about something",
    "where": "a question word used to ask about location",
    "when": "a question word used to ask about time",
    "who": "a question word used to ask about a person",
    "like": "to feel pleasure or enjoyment in something",
    "love": "an intense feeling of deep affection",
    "int": "a data type representing integers",
    "float": "a data type representing floating-point numbers",
    "double": "a data type representing double-precision floating-point numbers",
    "char": "a data type representing characters",
    "bool": "a data type representing boolean values (true or false)",
    "void": "a data type representing an absence of type",
    "if": "a conditional statement used to execute code based on a condition",
    "else": "a conditional statement used in conjunction with 'if' to execute code when the condition is false",
    "switch": "a control statement used to choose one of many blocks of code to execute",
    "case": "a label used in a 'switch' statement to specify a block of code",
    "break": "a statement used to exit a loop or switch statement",
    "continue": "a statement used to skip the current iteration of a loop and proceed to the next iteration",
    "for": "a loop statement used to repeatedly execute code for a specific number of times",
    "while": "a loop statement used to repeatedly execute code while a specified condition is true",
    "do": "a loop statement used to repeatedly execute code until a specified condition is false",
    "return": "a statement used to exit a function and optionally return a value",
    "class": "a blueprint for creating objects with predefined properties and methods",
    "struct": "a user-defined data type that groups related variables under a single name",
    "typedef": "a keyword used to create an alias for existing data types",
    "enum": "a data type used to define a set of named constants",
    "namespace": "a declarative region used to group identifiers that belong together",
    "public": "an access specifier that allows members to be accessed from outside the class",
    "private": "an access specifier that restricts access to members to only within the class",
    "protected": "an access specifier that allows access to members within the class and its subclasses",
    "static": "a keyword used to declare class-level variables and methods",
    "const": "a keyword used to define constants, whose values cannot be changed",
    "volatile": "a keyword used to indicate that a variable may be changed unexpectedly",
    "inline": "a keyword used to suggest that a function be expanded in place rather than called",
    "virtual": "a keyword used in inheritance to indicate that a method can be overridden in subclasses",
    "new": "a keyword used to dynamically allocate memory for objects",
    "delete": "a keyword used to deallocate memory previously allocated with 'new'",
    "malloc": "a function used in C to dynamically allocate memory",
    "free": "a function used in C to deallocate dynamically allocated memory",
    "sizeof": "an operator used to determine the size of a data type or variable",
    "cin": "an input stream object used in C++ for console input",
    "cout": "an output stream object used in C++ for console output",
    "scanf": "a function used in C for formatted input",
    "printf": "a function used in C for formatted output",
    "fopen": "a function used to open a file in C",
    "fclose": "a function used to close a file in C",
    "fread": "a function used to read data from a file in C",
    "fwrite": "a function used to write data to a file in C",
    "strtok": "a function used to tokenize strings in C",
    "strcpy": "a function used to copy strings in C",
    "strlen": "a function used to get the length of a string in C",
    "strcat": "a function used to concatenate strings in C",
    "strcmp": "a function used to compare strings in C",
    "memcpy": "a function used to copy blocks of memory in C",
    "memset": "a function used to fill blocks of memory with a specified value in C",
    "malloc": "a function used in C to dynamically allocate memory",
    "calloc": "a function used in C to dynamically allocate and initialize memory",
    "realloc": "a function used in C to reallocate memory",
    "strtok": "a function used to tokenize strings in C",
    "strcpy": "a function used to copy strings in C",
    "strlen": "a function used to get the length of a string in C",
    "strcat": "a function used to concatenate strings in C",
    "strcmp": "a function used to compare strings in C",
    "strcat": "a function used to concatenate strings in C",
    "memcpy": "a function used to copy blocks of memory in C",
    "memset": "a function used to fill blocks of memory with a specified value in C",
    "fopen": "a function used to open a file in C",
    "fclose": "a function used to close a file in C",
    "fgets": "a function used to read a line from a file in C",
    "fputs": "a function used to write a line to a file in C",
    "fprintf": "a function used to write formatted output to a file in C",
    "fscanf": "a function used to read formatted input from a file in C",
    "atoi": "a function used to convert a string to an integer in C",
    "atof": "a function used to convert a string to a floating-point number in C",
    "abs": "a function used to calculate the absolute value of a number",
    "pow": "a function used to calculate the power of a number",
    "sqrt": "a function used to calculate the square root of a number",
    "log": "a function used to calculate the natural logarithm of a number",
    "exp": "a function used to calculate the exponential value of a number",
    "sin": "a function used to calculate the sine of an angle",
    "cos": "a function used to calculate the cosine of an angle",
    "tan": "a function used to calculate the tangent of an angle",
    "ceil": "a function used to round a number up to the nearest integer",
    "floor": "a function used to round a number down to the nearest integer",
    "round": "a function used to round a number to the nearest integer",
    "random": "a function used to generate a random number",
    "srand": "a function used to seed the random number generator",
    "time": "a function used to get the current time",
    "array": "a data structure used to store multiple elements of the same type",
    "pointer": "a variable that stores the memory address of another variable",
    "reference": "a variable that acts as an alias for another variable",
    "dereference": "an operation used to access the value pointed to by a pointer",
    "object": "an instance of a class with its own properties and methods",
    "constructor": "a special method used to initialize objects in a class",
    "destructor": "a special method used to clean up resources when an object is destroyed",
    "polymorphism": "a feature in object-oriented programming that allows objects to be treated as instances of their parent class or interfaces",
    "encapsulation": "a concept in object-oriented programming that binds data and functions into a single unit (class) and restricts access to some of the object's components",
    "template": "a mechanism in C++ used for generic programming to define generic classes or functions",
    "function": "a block of reusable code that performs a specific task",
    "parameter": "variables used in a function to receive arguments passed during function invocation",
    "argument": "values passed to a function when it is called",
    "header": "a file containing declarations and prototypes used to interface with other files or libraries",
    "body": "the main part of a function or loop where the statements are written",
    "variable": "a named storage location used to store data that can change during program execution",
    "constant": "a value that cannot be altered during program execution",
    "loop": "a control structure that repeats a block of code until a certain condition is met",
    "condition": "a statement that evaluates to true or false, determining the execution path in a program",
    "statement": "a single line of code that performs a specific action",
    "expression": "a combination of variables, operators, and function calls that evaluates to a value",
    "operator": "a symbol that performs an operation on one or more operands",
    "logical": "operators used to perform logical operations such as AND, OR, and NOT",
    "arithmetic": "operators used to perform mathematical calculations like addition, subtraction, multiplication, and division",
    "Function call": "invoking a function to execute its code",
    "Function definition": "the declaration and implementation of a function",
    "Method": "a function associated with a class or object",
    "Interface": "a contract that defines the methods a class must implement",
    "Implementation": "the actual code that fulfills a contract or interface",
    "Inheritance": "the mechanism by which one class inherits properties and methods from another",
    "Constructor": "a special method used to initialize objects in a class",
    "Destructor": "a special method used to clean up resources when an object is destroyed",
    "Parameter list": "the list of variables defined in a function or method",
    "Argument list": "the actual values passed to a function or method during invocation",
    "Return type": "the data type of the value returned by a function",
    "Overloading": "defining multiple functions with the same name but different parameters",
    "Overriding": "providing a new implementation for a method in a subclass",
    "Superclass": "a class from which other classes inherit properties and methods",
    "Subclass": "a class that inherits properties and methods from a superclass",
    "Encapsulation": "binding data and functions into a single unit and restricting access",
    "Abstraction": "hiding complex implementation details and exposing only necessary features",
    "Modularity": "breaking down a program into smaller, manageable components",
    "Scope": "the visibility and accessibility of variables and functions in a program",
    "Global variable": "a variable accessible throughout the program",
    "Local variable": "a variable with limited scope, typically within a function or block",
    "Member variable": "a variable associated with a class or object",
    "Member function": "a function associated with a class or object",
    "Static variable": "a variable shared among all instances of a class",
    "Dynamic variable": "a variable whose value can change during program execution",
    "Type casting": "converting one data type into another",
    "Type conversion": "changing the data type of a value from one form to another",
    "Conditional statement": "a statement that executes code based on a condition",
    "Control flow": "the sequence in which statements are executed in a program",
    "Error handling": "dealing with errors and exceptions in a program",
    "Exception": "an unexpected event that disrupts the normal flow of a program",
    "Debugging": "the process of identifying and fixing errors in a program",
    "Testing": "evaluating a program's behavior to ensure correctness and reliability",
    "Test case": "a specific scenario or condition used to test a program",
    "Assertion": "a statement that checks the correctness of a program's assumptions",
    "Data structure": "a way of organizing and storing data for efficient access and modification",
    "Array": "a data structure that stores a collection of elements of the same type",
    "List": "a data structure that stores a collection of elements",
    "Stack": "a data structure that follows the Last In, First Out (LIFO) principle",
    "Queue": "a data structure that follows the First In, First Out (FIFO) principle",
    "Linked list": "a data structure that links elements together in a linear sequence",
    "Tree": "a hierarchical data structure with nodes and branches",
    "Graph": "a data structure representing connections between nodes",
    "Hash table": "a data structure that maps keys to values for efficient lookup",
    "Algorithm": "a step-by-step procedure for solving a problem",
    "Sorting": "arranging elements in a specified order",
    "Searching": "finding a specific element in a data structure",
    "Recursion": "a technique in which a function calls itself to solve a problem",
    "Iteration": "repeating a process using loops",
    "Looping": "repeating a set of instructions until a condition is met",
    "Breakpoint": "a point in a program's execution where debugging can be paused",
    "Pointer arithmetic": "performing arithmetic operations on memory addresses using pointers",
    "Memory management": "allocating and deallocating memory for program resources",
    "Garbage collection": "automatically reclaiming memory occupied by unused objects",
    "Heap": "a region of memory used for dynamic memory allocation",
    "Stack (data structure)": "a data structure that stores elements in a specific order",
    "Binary search tree": "a data structure that allows for efficient searching and insertion",
    "AVL tree": "a self-balancing binary search tree",
    "Red-black tree": "a self-balancing binary search tree with additional properties",
    "Priority queue": "a data structure that retrieves elements based on priority",
    "Binary heap": "a complete binary tree with the heap property",
    "Trie": "a tree data structure used for efficient retrieval of keys",
    "B-tree": "a self-balancing tree data structure used in databases and file systems",
    "Cache": "a temporary storage location for frequently accessed data",
    "Database": "a structured collection of data",
    "SQL": "Structured Query Language used for managing relational databases",
    "NoSQL": "Not Only SQL databases that provide flexible data models",
    "CRUD operations": "Create, Read, Update, Delete operations in database management",
    "Indexing": "optimizing database queries by creating indexes on columns",
    "Normalization": "organizing data to reduce redundancy and improve data integrity",
    "Query": "a request for information from a database",
    "Join": "combining rows from two or more tables based on a related column",
    "Primary key": "a unique identifier for each record in a database table",
    "Foreign key": "a column that establishes a relationship between two tables",
    "Relational database": "a database that organizes data into tables and relationships",
    "Object-relational mapping (ORM)": "a technique for mapping objects to database tables",
    "Transaction": "a unit of work that is performed as a single, atomic operation",
    "Locking": "controlling access to shared resources to prevent conflicts",
    "Deadlock": "a situation where two or more processes are unable to proceed",
    "Concurrency": "the ability of a program to execute multiple tasks simultaneously",
    "Parallelism": "simultaneous execution of multiple tasks using multiple processors",
    "Multithreading": "executing multiple threads within a single process",
    "Multiprocessing": "utilizing multiple processors to execute tasks concurrently",
    "Synchronization": "coordinating access to shared resources between threads",
    "Asynchronous programming": "executing tasks independently of the main program flow",
    "Event-driven programming": "programming paradigm based on events and event handlers",
    "Callback": "a function passed as an argument to another function",
    "Promise": "an object representing the eventual completion or failure of an asynchronous operation",
    "Future": "a placeholder for a value that may be available in the future"
  };
  

function searchDictionary(word) {
  const definition = dictionary[word.toLowerCase()];
  if (definition) {
    return definition;
  } else {
    return "Word not found";
  }
}

searchButton.addEventListener("click", () => {
  const word = searchInput.value.trim();
  if (word) {
    definition.innerHTML = `Searching for definition of "${word}"...`;

    // Use the searchDictionary function to look up the word
    const foundDefinition = searchDictionary(word);

    // Update the definition area with the found definition
    definition.innerHTML = `<b>${word}</b>: ${foundDefinition}`;
  } else {
    definition.innerHTML = "Please enter a word to search.";
  }
});
